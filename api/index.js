Index.PACKAGES = {"typekey" : [{"name" : "typekey.TypeBoundFunction", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "typekey\/TypeBoundFunction.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "typekey\/TypeBoundFunction.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TypeBoundFunction[TypeBound, Arg, ReturnVal]) ⇒ Boolean, msg: ⇒ Any): TypeBoundFunction[TypeBound, Arg, ReturnVal]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "typekey\/TypeBoundFunction.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TypeBoundFunction[TypeBound, Arg, ReturnVal]) ⇒ Boolean): TypeBoundFunction[TypeBound, Arg, ReturnVal]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "typekey\/TypeBoundFunction.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): TypeBoundFunction[TypeBound, Arg, ReturnVal]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "typekey\/TypeBoundFunction.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): TypeBoundFunction[TypeBound, Arg, ReturnVal]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "typekey\/TypeBoundFunction.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (TypeBoundFunction[TypeBound, Arg, ReturnVal], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "typekey\/TypeBoundFunction.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (TypeBoundFunction[TypeBound, Arg, ReturnVal], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "typekey\/TypeBoundFunction.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "typekey\/TypeBoundFunction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "typekey\/TypeBoundFunction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "typekey\/TypeBoundFunction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "typekey\/TypeBoundFunction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "typekey\/TypeBoundFunction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "typekey\/TypeBoundFunction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "typekey\/TypeBoundFunction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "typekey\/TypeBoundFunction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "typekey\/TypeBoundFunction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "typekey\/TypeBoundFunction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "typekey\/TypeBoundFunction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "typekey\/TypeBoundFunction.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "typekey\/TypeBoundFunction.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "typekey\/TypeBoundFunction.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "typekey\/TypeBoundFunction.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "typekey\/TypeBoundFunction.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "typekey\/TypeBoundFunction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "typekey\/TypeBoundFunction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "typekey\/TypeBoundFunction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(value: Arg[TypeParam]): ReturnVal[TypeParam]", "member" : "typekey.WideningTypeBoundFunction.apply", "link" : "typekey\/TypeBoundFunction.html#apply[TypeParam<:TypeBound](value:Arg[TypeParam]):ReturnVal[TypeParam]", "kind" : "abstract def"}], "shortDescription" : "a function with one type parameter, where both the argument and the returnvalue are types with a single type parameter, bound to the type parameter ofthe function.", "trait" : "typekey\/TypeBoundFunction.html", "kind" : "trait"}, {"name" : "typekey.TypeBoundMap", "shortDescription" : "a map where the types for keys and values share a type parameterwith the same bounds.", "object" : "typekey\/TypeBoundMap$.html", "members_class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "typekey\/TypeBoundMap.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TypeBoundMap[TypeBound, Key, Val]) ⇒ Boolean, msg: ⇒ Any): TypeBoundMap[TypeBound, Key, Val]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "typekey\/TypeBoundMap.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TypeBoundMap[TypeBound, Key, Val]) ⇒ Boolean): TypeBoundMap[TypeBound, Key, Val]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "typekey\/TypeBoundMap.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): TypeBoundMap[TypeBound, Key, Val]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "typekey\/TypeBoundMap.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): TypeBoundMap[TypeBound, Key, Val]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "typekey\/TypeBoundMap.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (TypeBoundMap[TypeBound, Key, Val], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "typekey\/TypeBoundMap.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (TypeBoundMap[TypeBound, Key, Val], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "typekey\/TypeBoundMap.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "equals", "tail" : "(that: Any): Boolean", "member" : "typekey.TypeBoundMap.equals", "link" : "typekey\/TypeBoundMap.html#equals(that:Any):Boolean", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "typekey.TypeBoundMap.toString", "link" : "typekey\/TypeBoundMap.html#toString():String", "kind" : "def"}, {"label" : "widen", "tail" : "(): TypeBoundMap[TypeBound, Key2, Val2]", "member" : "typekey.TypeBoundMap.widen", "link" : "typekey\/TypeBoundMap.html#widen[Key2[TypeParam<:TypeBound]>:Key[TypeParam],Val2[TypeParam<:TypeBound]>:Val[TypeParam]]:typekey.TypeBoundMap[TypeBound,Key2,Val2]", "kind" : "def"}, {"label" : "mapValues", "tail" : "(f: TypeBoundFunction[TypeBound, Val, Val2]): TypeBoundMap[TypeBound, Key, Val2]", "member" : "typekey.TypeBoundMap.mapValues", "link" : "typekey\/TypeBoundMap.html#mapValues[Val2[_<:TypeBound]](f:typekey.TypeBoundFunction[TypeBound,Val,Val2]):typekey.TypeBoundMap[TypeBound,Key,Val2]", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "typekey.TypeBoundMap.hashCode", "link" : "typekey\/TypeBoundMap.html#hashCode():Int", "kind" : "def"}, {"label" : "filterValues", "tail" : "(p: (Val[_ <: TypeBound]) ⇒ Boolean): TypeBoundMap[TypeBound, Key, Val]", "member" : "typekey.TypeBoundMap.filterValues", "link" : "typekey\/TypeBoundMap.html#filterValues(p:Val[_<:TypeBound]=>Boolean):typekey.TypeBoundMap[TypeBound,Key,Val]", "kind" : "def"}, {"label" : "filterNot", "tail" : "(p: (TypeBoundPair[TypeBound, Key, Val, _ <: TypeBound]) ⇒ Boolean): TypeBoundMap[TypeBound, Key, Val]", "member" : "typekey.TypeBoundMap.filterNot", "link" : "typekey\/TypeBoundMap.html#filterNot(p:typekey.TypeBoundPair[TypeBound,Key,Val,_<:TypeBound]=>Boolean):typekey.TypeBoundMap[TypeBound,Key,Val]", "kind" : "def"}, {"label" : "filterKeys", "tail" : "(p: (Key[_ <: TypeBound]) ⇒ Boolean): TypeBoundMap[TypeBound, Key, Val]", "member" : "typekey.TypeBoundMap.filterKeys", "link" : "typekey\/TypeBoundMap.html#filterKeys(p:Key[_<:TypeBound]=>Boolean):typekey.TypeBoundMap[TypeBound,Key,Val]", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (TypeBoundPair[TypeBound, Key, Val, _ <: TypeBound]) ⇒ Boolean): TypeBoundMap[TypeBound, Key, Val]", "member" : "typekey.TypeBoundMap.filter", "link" : "typekey\/TypeBoundMap.html#filter(p:typekey.TypeBoundPair[TypeBound,Key,Val,_<:TypeBound]=>Boolean):typekey.TypeBoundMap[TypeBound,Key,Val]", "kind" : "def"}, {"label" : "++", "tail" : "(that: TypeBoundMap[TypeBound, Key, Val]): TypeBoundMap[TypeBound, Key, Val]", "member" : "typekey.TypeBoundMap.++", "link" : "typekey\/TypeBoundMap.html#++(that:typekey.TypeBoundMap[TypeBound,Key,Val]):typekey.TypeBoundMap[TypeBound,Key,Val]", "kind" : "def"}, {"label" : "+", "tail" : "(pair: (Key[TypeParam], Val[ValTypeParam]))(valConforms: <:<[Val[ValTypeParam], Val[TypeParam]]): TypeBoundMap[TypeBound, Key, Val]", "member" : "typekey.TypeBoundMap.+", "link" : "typekey\/TypeBoundMap.html#+[TypeParam<:TypeBound,ValTypeParam<:TypeBound](pair:(Key[TypeParam],Val[ValTypeParam]))(implicitvalConforms:Val[ValTypeParam]<:<Val[TypeParam]):typekey.TypeBoundMap[TypeBound,Key,Val]", "kind" : "def"}, {"label" : "getOrElse", "tail" : "(key: Key[TypeParam], default: ⇒ Val[TypeParam]): Val[TypeParam]", "member" : "typekey.TypeBoundMap.getOrElse", "link" : "typekey\/TypeBoundMap.html#getOrElse[TypeParam<:TypeBound](key:Key[TypeParam],default:=>Val[TypeParam]):Val[TypeParam]", "kind" : "def"}, {"label" : "get", "tail" : "(key: Key[TypeParam]): Option[Val[TypeParam]]", "member" : "typekey.TypeBoundMap.get", "link" : "typekey\/TypeBoundMap.html#get[TypeParam<:TypeBound](key:Key[TypeParam]):Option[Val[TypeParam]]", "kind" : "def"}, {"label" : "apply", "tail" : "(key: Key[TypeParam]): Val[TypeParam]", "member" : "typekey.TypeBoundMap.apply", "link" : "typekey\/TypeBoundMap.html#apply[TypeParam<:TypeBound](key:Key[TypeParam]):Val[TypeParam]", "kind" : "def"}, {"label" : "mapValuesUnderlying", "tail" : "(f: WideningTypeBoundFunction[TypeBound, TypeBound2, Val, Val2]): Map[Any, Any]", "member" : "typekey.BaseTypeBoundMap.mapValuesUnderlying", "link" : "typekey\/TypeBoundMap.html#mapValuesUnderlying[TypeBound2>:TypeBound,Val2[_<:TypeBound2]](f:typekey.WideningTypeBoundFunction[TypeBound,TypeBound2,Val,Val2]):Map[Any,Any]", "kind" : "def"}, {"label" : "values", "tail" : "(): Iterable[Val[_ <: TypeBound]]", "member" : "typekey.BaseTypeBoundMap.values", "link" : "typekey\/TypeBoundMap.html#values:Iterable[Val[_<:TypeBound]]", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "typekey.BaseTypeBoundMap.size", "link" : "typekey\/TypeBoundMap.html#size:Int", "kind" : "def"}, {"label" : "keys", "tail" : "(): Iterable[Key[_ <: TypeBound]]", "member" : "typekey.BaseTypeBoundMap.keys", "link" : "typekey\/TypeBoundMap.html#keys:Iterable[Key[_<:TypeBound]]", "kind" : "def"}, {"label" : "iterator", "tail" : "(): Iterator[TypeBoundPair[TypeBound, Key, Val, _ <: TypeBound]]", "member" : "typekey.BaseTypeBoundMap.iterator", "link" : "typekey\/TypeBoundMap.html#iterator:Iterator[typekey.TypeBoundPair[TypeBound,Key,Val,_<:TypeBound]]", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "typekey.BaseTypeBoundMap.isEmpty", "link" : "typekey\/TypeBoundMap.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (TypeBoundPair[TypeBound, Key, Val, _ <: TypeBound]) ⇒ Unit): Unit", "member" : "typekey.BaseTypeBoundMap.foreach", "link" : "typekey\/TypeBoundMap.html#foreach(f:typekey.TypeBoundPair[TypeBound,Key,Val,_<:TypeBound]=>Unit):Unit", "kind" : "def"}, {"label" : "contains", "tail" : "(key: Key[_ <: TypeBound]): Boolean", "member" : "typekey.BaseTypeBoundMap.contains", "link" : "typekey\/TypeBoundMap.html#contains(key:Key[_<:TypeBound]):Boolean", "kind" : "def"}, {"label" : "underlying", "tail" : ": Map[Any, Any]", "member" : "typekey.BaseTypeBoundMap.underlying", "link" : "typekey\/TypeBoundMap.html#underlying:Map[Any,Any]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "typekey\/TypeBoundMap.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "typekey\/TypeBoundMap.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "typekey\/TypeBoundMap.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "typekey\/TypeBoundMap.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "typekey\/TypeBoundMap.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "typekey\/TypeBoundMap.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "typekey\/TypeBoundMap.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "typekey\/TypeBoundMap.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "typekey\/TypeBoundMap.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "typekey\/TypeBoundMap.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "typekey\/TypeBoundMap.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "typekey\/TypeBoundMap.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "typekey\/TypeBoundMap.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "typekey\/TypeBoundMap.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "typekey\/TypeBoundMap.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "typekey\/TypeBoundMap.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(): TypeBoundMap[TypeBound, Key, Val]", "member" : "typekey.TypeBoundMap.apply", "link" : "typekey\/TypeBoundMap$.html#apply[TypeBound,Key[_<:TypeBound],Val[_<:TypeBound]]():typekey.TypeBoundMap[TypeBound,Key,Val]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "typekey\/TypeBoundMap$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "typekey\/TypeBoundMap$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "typekey\/TypeBoundMap$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "typekey\/TypeBoundMap$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "typekey\/TypeBoundMap$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "typekey\/TypeBoundMap$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "typekey\/TypeBoundMap$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "typekey\/TypeBoundMap$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "typekey\/TypeBoundMap$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "typekey\/TypeBoundMap$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "typekey\/TypeBoundMap$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "typekey\/TypeBoundMap$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "typekey\/TypeBoundMap$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "typekey\/TypeBoundMap$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "typekey\/TypeBoundMap$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "typekey\/TypeBoundMap$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "typekey\/TypeBoundMap$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "typekey\/TypeBoundMap$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "typekey\/TypeBoundMap$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "typekey\/TypeBoundMap.html", "kind" : "class"}, {"name" : "typekey.TypeBoundPair", "shortDescription" : "mimics a pair found in an ordinary map, but preserves the type parameterequality in the two elements of the pair", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "typekey\/TypeBoundPair.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "typekey\/TypeBoundPair.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TypeBoundPair[TypeBound, A, B, TypeParam]) ⇒ Boolean, msg: ⇒ Any): TypeBoundPair[TypeBound, A, B, TypeParam]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "typekey\/TypeBoundPair.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TypeBoundPair[TypeBound, A, B, TypeParam]) ⇒ Boolean): TypeBoundPair[TypeBound, A, B, TypeParam]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "typekey\/TypeBoundPair.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): TypeBoundPair[TypeBound, A, B, TypeParam]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "typekey\/TypeBoundPair.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): TypeBoundPair[TypeBound, A, B, TypeParam]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "typekey\/TypeBoundPair.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (TypeBoundPair[TypeBound, A, B, TypeParam], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "typekey\/TypeBoundPair.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (TypeBoundPair[TypeBound, A, B, TypeParam], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "typekey\/TypeBoundPair.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "typekey.TypeBoundPair#<init>", "error" : "unsupported entity"}, {"label" : "_2", "tail" : ": B[TypeParam]", "member" : "typekey.TypeBoundPair._2", "link" : "typekey\/TypeBoundPair.html#_2:B[TypeParam]", "kind" : "val"}, {"label" : "_1", "tail" : ": A[TypeParam]", "member" : "typekey.TypeBoundPair._1", "link" : "typekey\/TypeBoundPair.html#_1:A[TypeParam]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "typekey\/TypeBoundPair.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "typekey\/TypeBoundPair.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "typekey\/TypeBoundPair.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "typekey\/TypeBoundPair.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "typekey\/TypeBoundPair.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "typekey\/TypeBoundPair.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "typekey\/TypeBoundPair.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "typekey\/TypeBoundPair.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "typekey\/TypeBoundPair.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "typekey\/TypeBoundPair.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "typekey\/TypeBoundPair.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "typekey\/TypeBoundPair.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "typekey\/TypeBoundPair.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "typekey\/TypeBoundPair.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "typekey\/TypeBoundPair.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "typekey\/TypeBoundPair.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "typekey\/TypeBoundPair.html", "kind" : "case class"}, {"name" : "typekey.TypeKey", "shortDescription" : "behaves much like a scala.reflect.runtime.universe.TypeTag, except that itcan also be safely used as a key in a hash or a set.", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "typekey\/TypeKey.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "typekey\/TypeKey.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TypeKey[A]) ⇒ Boolean, msg: ⇒ Any): TypeKey[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "typekey\/TypeKey.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TypeKey[A]) ⇒ Boolean): TypeKey[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "typekey\/TypeKey.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): TypeKey[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "typekey\/TypeKey.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): TypeKey[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "typekey\/TypeKey.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (TypeKey[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "typekey\/TypeKey.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (TypeKey[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "typekey\/TypeKey.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "typekey.TypeKey.toString", "link" : "typekey\/TypeKey.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : ": Int", "member" : "typekey.TypeKey.hashCode", "link" : "typekey\/TypeKey.html#hashCode:Int", "kind" : "lazy val"}, {"label" : "equals", "tail" : "(that: Any): Boolean", "member" : "typekey.TypeKey.equals", "link" : "typekey\/TypeKey.html#equals(that:Any):Boolean", "kind" : "def"}, {"label" : "castToUpperBound", "tail" : "(arg0: TypeKey[B]): Option[TypeKey[_ <: B]]", "member" : "typekey.TypeKey.castToUpperBound", "link" : "typekey\/TypeKey.html#castToUpperBound[B](implicitevidence$2:typekey.TypeKey[B]):Option[typekey.TypeKey[_<:B]]", "kind" : "def"}, {"label" : "castToLowerBound", "tail" : "(arg0: TypeKey[B]): Option[TypeKey[_ >: B]]", "member" : "typekey.TypeKey.castToLowerBound", "link" : "typekey\/TypeKey.html#castToLowerBound[B](implicitevidence$1:typekey.TypeKey[B]):Option[typekey.TypeKey[_>:B]]", "kind" : "def"}, {"label" : "inMirrorOf", "tail" : "(key: TypeKey[_]): TypeKey[A]", "member" : "typekey.TypeKey.inMirrorOf", "link" : "typekey\/TypeKey.html#inMirrorOf(key:typekey.TypeKey[_]):typekey.TypeKey[A]", "kind" : "def"}, {"label" : "typeArgs", "tail" : ": List[TypeKey[_]]", "member" : "typekey.TypeKey.typeArgs", "link" : "typekey\/TypeKey.html#typeArgs:List[typekey.TypeKey[_]]", "kind" : "lazy val"}, {"label" : "name", "tail" : ": String", "member" : "typekey.TypeKey.name", "link" : "typekey\/TypeKey.html#name:String", "kind" : "lazy val"}, {"label" : "fullname", "tail" : ": String", "member" : "typekey.TypeKey.fullname", "link" : "typekey\/TypeKey.html#fullname:String", "kind" : "lazy val"}, {"label" : "=:=", "tail" : "(that: TypeKey[_]): Boolean", "member" : "typekey.TypeKey.=:=", "link" : "typekey\/TypeKey.html#=:=(that:typekey.TypeKey[_]):Boolean", "kind" : "def"}, {"label" : "=:=", "tail" : "(that: scala.reflect.api.JavaUniverse.Type): Boolean", "member" : "typekey.TypeKey.=:=", "link" : "typekey\/TypeKey.html#=:=(that:reflect.runtime.universe.Type):Boolean", "kind" : "def"}, {"label" : "<:<", "tail" : "(that: TypeKey[_]): Boolean", "member" : "typekey.TypeKey.<:<", "link" : "typekey\/TypeKey.html#<:<(that:typekey.TypeKey[_]):Boolean", "kind" : "def"}, {"label" : "<:<", "tail" : "(that: scala.reflect.api.JavaUniverse.Type): Boolean", "member" : "typekey.TypeKey.<:<", "link" : "typekey\/TypeKey.html#<:<(that:reflect.runtime.universe.Type):Boolean", "kind" : "def"}, {"label" : "manifest", "tail" : ": Manifest[A]", "member" : "typekey.TypeKey.manifest", "link" : "typekey\/TypeKey.html#manifest:scala.reflect.Manifest[A]", "kind" : "lazy val"}, {"label" : "tpe", "tail" : ": scala.reflect.api.JavaUniverse.Type", "member" : "typekey.TypeKey.tpe", "link" : "typekey\/TypeKey.html#tpe:reflect.runtime.universe.Type", "kind" : "lazy val"}, {"member" : "typekey.TypeKey#<init>", "error" : "unsupported entity"}, {"label" : "tag", "tail" : ": scala.reflect.api.JavaUniverse.TypeTag[A]", "member" : "typekey.TypeKey.tag", "link" : "typekey\/TypeKey.html#tag:reflect.runtime.universe.TypeTag[A]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "typekey\/TypeKey.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "typekey\/TypeKey.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "typekey\/TypeKey.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "typekey\/TypeKey.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "typekey\/TypeKey.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "typekey\/TypeKey.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "typekey\/TypeKey.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "typekey\/TypeKey.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "typekey\/TypeKey.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "typekey\/TypeKey.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "typekey\/TypeKey.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "typekey\/TypeKey.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "typekey\/TypeKey.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "typekey\/TypeKey.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "typekey\/TypeKey.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "typekey\/TypeKey.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "typekey\/TypeKey.html", "kind" : "case class"}, {"name" : "typekey.TypeKeyMap", "shortDescription" : "a map where the keys are type keys with an upper bound, and thevalues have a type parameter with the same bound.", "object" : "typekey\/TypeKeyMap$.html", "members_class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "typekey\/TypeKeyMap.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TypeKeyMap[TypeBound, Val]) ⇒ Boolean, msg: ⇒ Any): TypeKeyMap[TypeBound, Val]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "typekey\/TypeKeyMap.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TypeKeyMap[TypeBound, Val]) ⇒ Boolean): TypeKeyMap[TypeBound, Val]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "typekey\/TypeKeyMap.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): TypeKeyMap[TypeBound, Val]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "typekey\/TypeKeyMap.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): TypeKeyMap[TypeBound, Val]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "typekey\/TypeKeyMap.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (TypeKeyMap[TypeBound, Val], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "typekey\/TypeKeyMap.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (TypeKeyMap[TypeBound, Val], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "typekey\/TypeKeyMap.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "typekey.TypeKeyMap.toString", "link" : "typekey\/TypeKeyMap.html#toString():String", "kind" : "def"}, {"label" : "equals", "tail" : "(that: Any): Boolean", "member" : "typekey.TypeKeyMap.equals", "link" : "typekey\/TypeKeyMap.html#equals(that:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "typekey.TypeKeyMap.hashCode", "link" : "typekey\/TypeKeyMap.html#hashCode():Int", "kind" : "def"}, {"label" : "mapValuesWiden", "tail" : "(f: WideningTypeBoundFunction[TypeBound, WiderTypeBound, Val, NewVal]): TypeKeyMap[WiderTypeBound, NewVal]", "member" : "typekey.TypeKeyMap.mapValuesWiden", "link" : "typekey\/TypeKeyMap.html#mapValuesWiden[WiderTypeBound>:TypeBound,NewVal[_<:WiderTypeBound]](f:typekey.WideningTypeBoundFunction[TypeBound,WiderTypeBound,Val,NewVal]):typekey.TypeKeyMap[WiderTypeBound,NewVal]", "kind" : "def"}, {"label" : "widen", "tail" : "(): TypeKeyMap[TypeBound, Val2]", "member" : "typekey.TypeKeyMap.widen", "link" : "typekey\/TypeKeyMap.html#widen[Val2[TypeParam<:TypeBound]>:Val[TypeParam]]:typekey.TypeKeyMap[TypeBound,Val2]", "kind" : "def"}, {"label" : "mapValues", "tail" : "(f: TypeBoundFunction[TypeBound, Val, NewVal]): TypeKeyMap[TypeBound, NewVal]", "member" : "typekey.TypeKeyMap.mapValues", "link" : "typekey\/TypeKeyMap.html#mapValues[NewVal[_<:TypeBound]](f:typekey.TypeBoundFunction[TypeBound,Val,NewVal]):typekey.TypeKeyMap[TypeBound,NewVal]", "kind" : "def"}, {"label" : "filterValues", "tail" : "(p: (Val[_ <: TypeBound]) ⇒ Boolean): TypeKeyMap[TypeBound, Val]", "member" : "typekey.TypeKeyMap.filterValues", "link" : "typekey\/TypeKeyMap.html#filterValues(p:Val[_<:TypeBound]=>Boolean):typekey.TypeKeyMap[TypeBound,Val]", "kind" : "def"}, {"label" : "filterTypeBound", "tail" : "(arg0: TypeKey[TypeBound2]): TypeKeyMap[TypeBound2, Val]", "member" : "typekey.TypeKeyMap.filterTypeBound", "link" : "typekey\/TypeKeyMap.html#filterTypeBound[TypeBound2<:TypeBound](implicitevidence$5:typekey.TypeKey[TypeBound2]):typekey.TypeKeyMap[TypeBound2,Val]", "kind" : "def"}, {"label" : "filterNot", "tail" : "(p: (TypeBoundPair[TypeBound, TypeKey, Val, _ <: TypeBound]) ⇒ Boolean): TypeKeyMap[TypeBound, Val]", "member" : "typekey.TypeKeyMap.filterNot", "link" : "typekey\/TypeKeyMap.html#filterNot(p:typekey.TypeBoundPair[TypeBound,typekey.TypeKey,Val,_<:TypeBound]=>Boolean):typekey.TypeKeyMap[TypeBound,Val]", "kind" : "def"}, {"label" : "filterKeys", "tail" : "(p: (TypeKey[_ <: TypeBound]) ⇒ Boolean): TypeKeyMap[TypeBound, Val]", "member" : "typekey.TypeKeyMap.filterKeys", "link" : "typekey\/TypeKeyMap.html#filterKeys(p:typekey.TypeKey[_<:TypeBound]=>Boolean):typekey.TypeKeyMap[TypeBound,Val]", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (TypeBoundPair[TypeBound, TypeKey, Val, _ <: TypeBound]) ⇒ Boolean): TypeKeyMap[TypeBound, Val]", "member" : "typekey.TypeKeyMap.filter", "link" : "typekey\/TypeKeyMap.html#filter(p:typekey.TypeBoundPair[TypeBound,typekey.TypeKey,Val,_<:TypeBound]=>Boolean):typekey.TypeKeyMap[TypeBound,Val]", "kind" : "def"}, {"label" : "contains", "tail" : "(arg0: TypeKey[TypeParam]): Boolean", "member" : "typekey.TypeKeyMap.contains", "link" : "typekey\/TypeKeyMap.html#contains[TypeParam<:TypeBound](implicitevidence$4:typekey.TypeKey[TypeParam]):Boolean", "kind" : "def"}, {"label" : "++", "tail" : "(that: TypeKeyMap[TypeBound, Val]): TypeKeyMap[TypeBound, Val]", "member" : "typekey.TypeKeyMap.++", "link" : "typekey\/TypeKeyMap.html#++(that:typekey.TypeKeyMap[TypeBound,Val]):typekey.TypeKeyMap[TypeBound,Val]", "kind" : "def"}, {"label" : "+", "tail" : "(value: Val[TypeParam])(key: TypeKey[TypeParam]): TypeKeyMap[TypeBound, Val]", "member" : "typekey.TypeKeyMap.+", "link" : "typekey\/TypeKeyMap.html#+[TypeParam<:TypeBound](value:Val[TypeParam])(implicitkey:typekey.TypeKey[TypeParam]):typekey.TypeKeyMap[TypeBound,Val]", "kind" : "def"}, {"label" : "+", "tail" : "(pair: (TypeKey[TypeParam], Val[ValTypeParam]))(valConforms: <:<[Val[ValTypeParam], Val[TypeParam]]): TypeKeyMap[TypeBound, Val]", "member" : "typekey.TypeKeyMap.+", "link" : "typekey\/TypeKeyMap.html#+[TypeParam<:TypeBound,ValTypeParam<:TypeBound](pair:(typekey.TypeKey[TypeParam],Val[ValTypeParam]))(implicitvalConforms:Val[ValTypeParam]<:<Val[TypeParam]):typekey.TypeKeyMap[TypeBound,Val]", "kind" : "def"}, {"label" : "getOrElse", "tail" : "(default: ⇒ Val[TypeParam])(arg0: TypeKey[TypeParam]): Val[TypeParam]", "member" : "typekey.TypeKeyMap.getOrElse", "link" : "typekey\/TypeKeyMap.html#getOrElse[TypeParam<:TypeBound](default:=>Val[TypeParam])(implicitevidence$3:typekey.TypeKey[TypeParam]):Val[TypeParam]", "kind" : "def"}, {"label" : "get", "tail" : "(arg0: TypeKey[TypeParam]): Option[Val[TypeParam]]", "member" : "typekey.TypeKeyMap.get", "link" : "typekey\/TypeKeyMap.html#get[TypeParam<:TypeBound](implicitevidence$2:typekey.TypeKey[TypeParam]):Option[Val[TypeParam]]", "kind" : "def"}, {"label" : "apply", "tail" : "(arg0: TypeKey[TypeParam]): Val[TypeParam]", "member" : "typekey.TypeKeyMap.apply", "link" : "typekey\/TypeKeyMap.html#apply[TypeParam<:TypeBound](implicitevidence$1:typekey.TypeKey[TypeParam]):Val[TypeParam]", "kind" : "def"}, {"label" : "mapValuesUnderlying", "tail" : "(f: WideningTypeBoundFunction[TypeBound, TypeBound2, Val, Val2]): Map[Any, Any]", "member" : "typekey.BaseTypeBoundMap.mapValuesUnderlying", "link" : "typekey\/TypeKeyMap.html#mapValuesUnderlying[TypeBound2>:TypeBound,Val2[_<:TypeBound2]](f:typekey.WideningTypeBoundFunction[TypeBound,TypeBound2,Val,Val2]):Map[Any,Any]", "kind" : "def"}, {"label" : "values", "tail" : "(): Iterable[Val[_ <: TypeBound]]", "member" : "typekey.BaseTypeBoundMap.values", "link" : "typekey\/TypeKeyMap.html#values:Iterable[Val[_<:TypeBound]]", "kind" : "def"}, {"label" : "size", "tail" : "(): Int", "member" : "typekey.BaseTypeBoundMap.size", "link" : "typekey\/TypeKeyMap.html#size:Int", "kind" : "def"}, {"label" : "keys", "tail" : "(): Iterable[TypeKey[_ <: TypeBound]]", "member" : "typekey.BaseTypeBoundMap.keys", "link" : "typekey\/TypeKeyMap.html#keys:Iterable[Key[_<:TypeBound]]", "kind" : "def"}, {"label" : "iterator", "tail" : "(): Iterator[TypeBoundPair[TypeBound, TypeKey, Val, _ <: TypeBound]]", "member" : "typekey.BaseTypeBoundMap.iterator", "link" : "typekey\/TypeKeyMap.html#iterator:Iterator[typekey.TypeBoundPair[TypeBound,Key,Val,_<:TypeBound]]", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "typekey.BaseTypeBoundMap.isEmpty", "link" : "typekey\/TypeKeyMap.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (TypeBoundPair[TypeBound, TypeKey, Val, _ <: TypeBound]) ⇒ Unit): Unit", "member" : "typekey.BaseTypeBoundMap.foreach", "link" : "typekey\/TypeKeyMap.html#foreach(f:typekey.TypeBoundPair[TypeBound,typekey.TypeKey,Val,_<:TypeBound]=>Unit):Unit", "kind" : "def"}, {"label" : "contains", "tail" : "(key: TypeKey[_ <: TypeBound]): Boolean", "member" : "typekey.BaseTypeBoundMap.contains", "link" : "typekey\/TypeKeyMap.html#contains(key:Key[_<:TypeBound]):Boolean", "kind" : "def"}, {"label" : "underlying", "tail" : ": Map[Any, Any]", "member" : "typekey.BaseTypeBoundMap.underlying", "link" : "typekey\/TypeKeyMap.html#underlying:Map[Any,Any]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "typekey\/TypeKeyMap.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "typekey\/TypeKeyMap.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "typekey\/TypeKeyMap.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "typekey\/TypeKeyMap.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "typekey\/TypeKeyMap.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "typekey\/TypeKeyMap.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "typekey\/TypeKeyMap.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "typekey\/TypeKeyMap.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "typekey\/TypeKeyMap.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "typekey\/TypeKeyMap.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "typekey\/TypeKeyMap.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "typekey\/TypeKeyMap.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "typekey\/TypeKeyMap.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "typekey\/TypeKeyMap.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "typekey\/TypeKeyMap.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "typekey\/TypeKeyMap.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(): TypeKeyMap[TypeBound, Val]", "member" : "typekey.TypeKeyMap.apply", "link" : "typekey\/TypeKeyMap$.html#apply[TypeBound,Val[_<:TypeBound]]():typekey.TypeKeyMap[TypeBound,Val]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "typekey\/TypeKeyMap$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "typekey\/TypeKeyMap$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "typekey\/TypeKeyMap$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "typekey\/TypeKeyMap$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "typekey\/TypeKeyMap$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "typekey\/TypeKeyMap$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "typekey\/TypeKeyMap$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "typekey\/TypeKeyMap$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "typekey\/TypeKeyMap$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "typekey\/TypeKeyMap$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "typekey\/TypeKeyMap$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "typekey\/TypeKeyMap$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "typekey\/TypeKeyMap$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "typekey\/TypeKeyMap$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "typekey\/TypeKeyMap$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "typekey\/TypeKeyMap$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "typekey\/TypeKeyMap$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "typekey\/TypeKeyMap$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "typekey\/TypeKeyMap$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "typekey\/TypeKeyMap.html", "kind" : "class"}, {"name" : "typekey.WideningTypeBoundFunction", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "typekey\/WideningTypeBoundFunction.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "typekey\/WideningTypeBoundFunction.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (WideningTypeBoundFunction[TypeBound, WiderTypeBound, Arg, ReturnVal]) ⇒ Boolean, msg: ⇒ Any): WideningTypeBoundFunction[TypeBound, WiderTypeBound, Arg, ReturnVal]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "typekey\/WideningTypeBoundFunction.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (WideningTypeBoundFunction[TypeBound, WiderTypeBound, Arg, ReturnVal]) ⇒ Boolean): WideningTypeBoundFunction[TypeBound, WiderTypeBound, Arg, ReturnVal]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "typekey\/WideningTypeBoundFunction.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): WideningTypeBoundFunction[TypeBound, WiderTypeBound, Arg, ReturnVal]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "typekey\/WideningTypeBoundFunction.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): WideningTypeBoundFunction[TypeBound, WiderTypeBound, Arg, ReturnVal]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "typekey\/WideningTypeBoundFunction.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (WideningTypeBoundFunction[TypeBound, WiderTypeBound, Arg, ReturnVal], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "typekey\/WideningTypeBoundFunction.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (WideningTypeBoundFunction[TypeBound, WiderTypeBound, Arg, ReturnVal], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "typekey\/WideningTypeBoundFunction.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "typekey\/WideningTypeBoundFunction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "typekey\/WideningTypeBoundFunction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "typekey\/WideningTypeBoundFunction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "typekey\/WideningTypeBoundFunction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "typekey\/WideningTypeBoundFunction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "typekey\/WideningTypeBoundFunction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "typekey\/WideningTypeBoundFunction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "typekey\/WideningTypeBoundFunction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "typekey\/WideningTypeBoundFunction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "typekey\/WideningTypeBoundFunction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "typekey\/WideningTypeBoundFunction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "typekey\/WideningTypeBoundFunction.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "typekey\/WideningTypeBoundFunction.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "typekey\/WideningTypeBoundFunction.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "typekey\/WideningTypeBoundFunction.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "typekey\/WideningTypeBoundFunction.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "typekey\/WideningTypeBoundFunction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "typekey\/WideningTypeBoundFunction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "typekey\/WideningTypeBoundFunction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(value: Arg[TypeParam]): ReturnVal[TypeParam]", "member" : "typekey.WideningTypeBoundFunction.apply", "link" : "typekey\/WideningTypeBoundFunction.html#apply[TypeParam<:TypeBound](value:Arg[TypeParam]):ReturnVal[TypeParam]", "kind" : "abstract def"}], "shortDescription" : "like a TypeBoundFunction, except that the type bound for the returnvalue is wider than the type bound for the argument.", "trait" : "typekey\/WideningTypeBoundFunction.html", "kind" : "trait"}]};